<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE book [
<!ENTITY % tnt SYSTEM "../tnt.ent">
%tnt;
]>
<book xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0">
<title>Tarantool/Box Developer Guide</title>
<preface>
  <title>What documentation there is</title>
  <para>
    Tarantool documentation consists of:
    <itemizedlist>
    <listitem><para>a user guide</para></listitem>
    <listitem><para>a developer guide (you're reading it)</para></listitem>
    <listitem><para>protocol description box-protocol.txt</para></listitem>
    <listitem><para>coding style guides for Lua, Objective C, C, Python (for
    other connectors, we use conventions of the connector programming
    language community)</para></listitem>
  </itemizedlist>
  </para>
</preface>
<chapter>
<title>Compiling</title>
<section>
<title>How to fix a compile time error about missing confetti</title>
<para>
  An error about missing confetti:
<programlisting>
Generating prscfg.h, prscfg.c...
[ 13%] Generating prscfg.h, prscfg.c
/bin/sh: CONFETTI-NOTFOUND: not found
</programlisting>
This error is caused by cmake, trying to re-create generated files
prscfg.h, prscfg.c in <filename>cfg/</filename> directory.
These files are under revision control and normally need not to be 
regenerated. 
The fix is to
<programlisting>
<prompt>$ </prompt>git checkout cfg/prscfg.h
<prompt>$ </prompt>git checkout cfg/prscfg.c
<prompt>$ </prompt>touch cfg/prscfg.[hc]
</programlisting>
The other alternative, if you have actually modified
<filename>core_cfg.cfg_tmpl</filename> is to install confetti from
<link xlink:href="http://github.com/mailru/confetti"/> and let cmake use it.
  
  </para>
</section>

<section>
<title>How to build the XML manual</title>
<para>
To build XML manual, you'll need:

<itemizedlist>
<listitem><para>xsltproc</para></listitem>
<listitem><para>docbook5-xml</para></listitem>
<listitem><para>docbook-xsl-ns</para></listitem>
<listitem><para>w3c-sgml-lib</para></listitem>
<listitem><para>libsaxon-java- for saxon processing</para></listitem>
<listitem><para>libxml-commons-resolver1.1-java</para></listitem>
<listitem><para>libxml2-utils</para></listitem>
<listitem><para>libxerces2-java</para></listitem>
<listitem><para>libxslthl-java</para></listitem>
<listitem><para>lynx</para></listitem>
<listitem><para>jing</para></listitem>
</itemizedlist>



When all pre-requisites are met, you should run:

<programlisting>
  <prompt>$ </prompt> cmake . -DENABLE_DOC=yes
</programlisting>

to enable documentation builder.

If you want to make tarantool user guide, you should run the following command
from taratnool root directory:

<programlisting>
  <prompt>$ </prompt> make html
</programlisting>

or

<programlisting>
  <prompt>$ </prompt> cd doc/user
  <prompt>$ </prompt> make
</programlisting>

The html version of the user guide will be generated in doc/www-data.

To building the developer guilde, you should run:

<programlisting>
  <prompt>$ </prompt> cd doc/developer
  <prompt>$ </prompt> make
</programlisting>

The html version of the developer guide will be generated in doc/www-data.

</para>
</section>
</chapter>
<chapter>
<title>Release management</title>
  <section><title>How to make a minor release</title>
  <para>
  <programlisting>git tag -a 1.4.4 -m "Next minor in 1.4 series"
vim CMakeLists.txt # edit CPACK_PACKAGE_VERSION_PATCH
git push --tags
</programlisting>
Update the Web site in doc/www-data.
</para>
<para>
Go to launchpad and move all "Fix committed" bugs to "Fix released".
</para>
<para>
Update all blueprints, upload the ChangeLog, based on <prompt>git log</prompt>output.
The ChangeLog must only include items which are mentioned as bugs
or blueprints on Launchpad. If anything significant is there,
which is not mentioned, something went wrong in release planning
and the release should be held up until this is cleared.
  </para>
<para>
Click 'Release milestone'. Create a milestone for the next minor 
release. Alert the driver to target bugs and blueprints 
to the new milestone.
</para>
<para>
Upload the milestone from http://tarantool.org/dist to Launchpad. Use the .src.tar.gz build.
</para>
<para>
</para>
  </section>
</chapter>
<chapter>
<title>Developer guidelines</title>
<section>
<title>How to work on a bug</title>
<para>Any defect, even minor, if it changes the user-visible
server behavior, needs a bug report. Report a bug at
http://bugs.launchpad.net/tarantool.

When reporting a bug, try to come up with a test case right away. 
Set the current maintenance milestone for the bug fix, and specify
the series. Assign the bug to yourself. Put the status to 'In
progress' Once the patch is ready, put the bug the bug to 'In
review' and solicit a review for the fix.
</para>
<para>
Once there is a positive code review, push the patch 
and set the status to 'Fix committed'
</para>
<para>
Patches for bugs should contain a reference to the respective
Launchpad bug page or at least bug id. Each patch should have a
test, unless coming up with one is difficult in the current
framework, in which case QA should be alerted.
</para>
<para>
There are two things you need to do when your patch makes it
into the master:
<itemizedlist>
    <listitem><para>
        put the bug to 'fix committed',
    </para></listitem>
    <listitem><para>
        delete the remote branch.
    </para></listitem>
</itemizedlist>

</para>
</section>
</chapter>
</book>

<!--
vim: tw=66 syntax=docbk
vim: spell spelllang=en_us
-->
